skel.registerPlugin("layers", function($) {
  /**
   * @param {?} id
   * @param {?} common
   * @param {number} position
   * @return {undefined}
   */
  function init(id, common, position) {
    var originalEvent;
    var cmp;
    this.id = id;
    /** @type {number} */
    this.index = position;
    this[key] = {
      breakpoints : val,
      states : val,
      position : val,
      side : val,
      animation : type,
      orientation : type,
      width : 0,
      height : 0,
      zIndex : this.index,
      html : "",
      hidden : data,
      exclusive : exclusive,
      resetScroll : exclusive,
      resetForms : exclusive,
      swipeToClose : exclusive,
      clickToClose : data
    };
    self._.extend(this[key], common);
    this[last] = self._.newDiv(this[key].html);
    this[last].id = id;
    this[last]._layer = this;
    /** @type {null} */
    this[attr] = val;
    /** @type {null} */
    this[propname] = val;
    /** @type {null} */
    this[propName] = val;
    /** @type {boolean} */
    this[unlock] = data;
    cmp = self._.cacheElement(this.id, this[last], mm, 1);
    /**
     * @return {undefined}
     */
    cmp.onAttach = function() {
      var a = this.object._layer;
      if (!a[sortField]()) {
        a.init();
      }
      a.resume();
    };
    /**
     * @return {undefined}
     */
    cmp.onDetach = function() {
      var position = this.object._layer;
      position.suspend();
    };
    if (this[key].states) {
      originalEvent = self._[state](this[key].states);
      self._[timeoutKey](originalEvent, function(prop) {
        self._.addCachedElementToState(self._.sd + originalEvent[prop], cmp);
      });
    } else {
      if (this[key].breakpoints) {
        originalEvent = self._[state](this[key].breakpoints);
      } else {
        originalEvent = self._.breakpointList;
      }
      self._[timeoutKey](originalEvent, function(prop) {
        self._.addCachedElementToBreakpoint(originalEvent[prop], cmp);
      });
    }
  }
  var self;
  /** @type {string} */
  var key = "config";
  /** @type {string} */
  var funcName = "_skel_layers_translateOrigin";
  /** @type {string} */
  var i = "cache";
  /** @type {string} */
  var attr = "$element";
  /** @type {string} */
  var m = "_skel_layers_translate";
  /** @type {string} */
  var fnName = "_skel_layers_resetForms";
  /** @type {string} */
  var letter = "_skel_layers_resume";
  /** @type {string} */
  var n = "_skel_layers_promote";
  /** @type {string} */
  var proto = "activeWrapper";
  /** @type {string} */
  var width = "exclusiveLayer";
  /** @type {string} */
  var OFFLINE_COOKIE_NAME = "moveToInactiveWrapper";
  /** @type {string} */
  var methodName = "_skel_layers_demote";
  /** @type {string} */
  var root = "moveToActiveWrapper";
  /** @type {string} */
  var jsonp = "setTimeout";
  /** @type {string} */
  var name = "right";
  /** @type {string} */
  var y = "bottom";
  /** @type {string} */
  var k = "useActive";
  /** @type {string} */
  var prop = "scrollTop";
  /** @type {string} */
  var _i = "deactivate";
  /** @type {string} */
  var prefix = "width";
  /** @type {string} */
  var method = "css";
  /** @type {string} */
  var v = "center";
  /** @type {string} */
  var objUid = "_skel_layers_suspend";
  /** @type {string} */
  var element = "position";
  /** @type {string} */
  var _idx = "prototype";
  /** @type {string} */
  var x = "left";
  /** @type {null} */
  var val = null;
  /** @type {string} */
  var r = "wrapper";
  /** @type {string} */
  var elem = "skel-layers-layer-z-index";
  /** @type {string} */
  var eventName = "children";
  /** @type {string} */
  var operator = "_skel_layers_init";
  /** @type {boolean} */
  var data = false;
  /** @type {string} */
  var l = "inactiveWrapper";
  /** @type {string} */
  var start = "length";
  /** @type {string} */
  var item = "top";
  /** @type {string} */
  var series = "deviceType";
  /** @type {string} */
  var f = "height";
  /** @type {string} */
  var loadEvents = "touchstart.lock click.lock scroll.lock";
  /** @type {string} */
  var id = "window";
  /** @type {string} */
  var event = "transform";
  /** @type {string} */
  var last = "element";
  /** @type {string} */
  var stopPropagation = "stopPropagation";
  /** @type {string} */
  var title = "resetForms";
  /** @type {string} */
  var a = "overflow-x";
  /** @type {string} */
  var preventDefault = "preventDefault";
  /** @type {string} */
  var callbackSymbol = "recalcW";
  /** @type {string} */
  var number = "-webkit-";
  /** @type {string} */
  var resp = "padding-bottom";
  /** @type {string} */
  var activeClassName = "skel-layers-exclusiveActive";
  /** @type {string} */
  var mm = "skel_layers_inactiveWrapper";
  /** @type {string} */
  var originalEvent = "originalEvent";
  /** @type {string} */
  var sortField = "isInitialized";
  /** @type {string} */
  var context = "animation";
  /** @type {string} */
  var propName = "touchPosY";
  /** @type {string} */
  var propname = "touchPosX";
  /** @type {string} */
  var selector = "-webkit-tap-highlight-color";
  /** @type {string} */
  var target = "skel-layers-layer-index";
  /** @type {string} */
  var dom = "z-index";
  /** @type {string} */
  var line = "skel-layers-layer-position";
  /** @type {string} */
  var plugin = "animations";
  /** @type {string} */
  var has = "unlockView";
  /** @type {string} */
  var cols = '<div id="skel-layers-tmp-';
  /** @type {string} */
  var dimension = "_skel_layers_initializeCell";
  /** @type {string} */
  var left = "hidden";
  /** @type {string} */
  var action = "registerLocation";
  /** @type {string} */
  var types = "resize.lock scroll.lock";
  /** @type {string} */
  var d = "activate";
  /** @type {string} */
  var type = "none";
  /** @type {string} */
  var events = "orientationchange.lock";
  /** @type {string} */
  var num = "positions";
  /** @type {string} */
  var option = "speed";
  /** @type {string} */
  var TAGS = "find";
  /** @type {string} */
  var sum = "-moz-";
  /** @type {string} */
  var reverseKey = "_skel_layers_expandCell";
  /** @type {string} */
  var attrName = "attr";
  /** @type {string} */
  var pluginname = "_skel_layers_hasParent";
  /** @type {string} */
  var property = "append";
  /** @type {string} */
  var lang = "layers";
  /** @type {boolean} */
  var exclusive = true;
  /** @type {string} */
  var b = "isTouch";
  /** @type {string} */
  var push = "lockView";
  /** @type {string} */
  var total = "-ms-";
  /** @type {string} */
  var index = "DOMReady";
  /** @type {string} */
  var tr = "#skel-layers-tmp-";
  /** @type {string} */
  var bits = "_skel_layers_scrollPos";
  /** @type {string} */
  var value = "auto";
  /** @type {string} */
  var module = "_skel_layers_xcss";
  /** @type {string} */
  var memo = "-o-";
  /** @type {string} */
  var o = "transformBreakpoints";
  /** @type {string} */
  var VISIBLE = "visible";
  /** @type {string} */
  var fn = "rgba(0,0,0,0)";
  /** @type {string} */
  var timeoutKey = "iterate";
  /** @type {string} */
  var attribute = "cell-size";
  /** @type {string} */
  var insertionType = "appendTo";
  /** @type {string} */
  var idx = "vars";
  /** @type {string} */
  var label = "body";
  /** @type {string} */
  var unlock = "active";
  /** @type {string} */
  var str_px = "px";
  /** @type {string} */
  var eventType = "click";
  /** @type {string} */
  var delimiter = "-";
  /** @type {string} */
  var alpha = "touches";
  /** @type {string} */
  var func = "recalcH";
  /** @type {string} */
  var far = "overflow-";
  /** @type {string} */
  var j = "side";
  /** @type {string} */
  var _name = "isVisible";
  /** @type {string} */
  var maxDate = "relative";
  /** @type {string} */
  var arrayKey = "transformTest";
  /** @type {string} */
  var pKey = "addClass";
  /** @type {string} */
  var tool = "android";
  /** @type {string} */
  var state = "getArray";
  /** @type {string} */
  var s = "#";
  /** @type {string} */
  var input = "*";
  return typeof $ == "undefined" ? data : ($.fn[pluginname] = function() {
    return $(this).parents()[start] > 0;
  }, $.fn[n] = function(ord) {
    var partId;
    var context;
    var d;
    if (this[start] > 1) {
      /** @type {number} */
      partId = 0;
      for (;partId < this[start];partId++) {
        $(this[partId])[n](ord);
      }
      return $(this);
    }
    return context = $(this), isNaN(d = parseInt(context.data(target))) && (d = 0), context.data(elem, context[method](dom))[method](dom, self[key].baseZIndex + d + (ord ? ord : 1)), context;
  }, $.fn[methodName] = function() {
    var partId;
    var results;
    if (this[start] > 1) {
      /** @type {number} */
      partId = 0;
      for (;partId < this[start];partId++) {
        $(this[partId])[methodName]();
      }
      return $(this);
    }
    return results = $(this), results[method](dom, results.data(elem)).data(elem, ""), results;
  }, $.fn._skel_layers_xcssValue = function(selector, value) {
    return $(this)[method](selector, value)[method](selector, sum + value)[method](selector, number + value)[method](selector, memo + value)[method](selector, total + value);
  }, $.fn._skel_layers_xcssProperty = function(num, value) {
    return $(this)[method](num, value)[method](sum + num, value)[method](number + num, value)[method](memo + num, value)[method](total + num, value);
  }, $.fn[module] = function(num, value) {
    return $(this)[method](num, value)[method](sum + num, sum + value)[method](number + num, number + value)[method](memo + num, memo + value)[method](total + num, total + value);
  }, $.fn[fnName] = function() {
    var emptyJ = $(this);
    return $(this)[TAGS]("form").each(function() {
      this.reset();
    }), emptyJ;
  }, $.fn[dimension] = function() {
    var self = $(this);
    if (self[attrName]("class").match(/(\s+|^)([0-9]+)u(\s+|$)/)) {
      self.data(attribute, parseInt(RegExp.$2));
    }
  }, $.fn[reverseKey] = function() {
    var el = $(this);
    var c = el.parent();
    /** @type {number} */
    var positionLeft = 12;
    c[eventName]().each(function() {
      var el = $(this);
      var classes = el[attrName]("class");
      if (classes) {
        if (classes.match(/(\s+|^)([0-9]+)u(\s+|$)/)) {
          positionLeft -= parseInt(RegExp.$2);
        }
      }
    });
    if (positionLeft > 0) {
      el[dimension]();
      el[method](prefix, (el.data(attribute) + positionLeft) / 12 * 100 + "%");
    }
  }, init[_idx][num] = {
    "top-left" : {
      v : item,
      h : x,
      side : x
    },
    "top-right" : {
      v : item,
      h : name,
      side : name
    },
    top : {
      v : item,
      h : v,
      side : item
    },
    "top-center" : {
      v : item,
      h : v,
      side : item
    },
    "bottom-left" : {
      v : y,
      h : x,
      side : x
    },
    "bottom-right" : {
      v : y,
      h : name,
      side : name
    },
    bottom : {
      v : y,
      h : v,
      side : y
    },
    "bottom-center" : {
      v : y,
      h : v,
      side : y
    },
    left : {
      v : v,
      h : x,
      side : x
    },
    "center-left" : {
      v : v,
      h : x,
      side : x
    },
    right : {
      v : v,
      h : name,
      side : name
    },
    "center-right" : {
      v : v,
      h : name,
      side : name
    }
  }, init[_idx][plugin] = {
    none : {
      /**
       * @param {Object} item
       * @return {undefined}
       */
      activate : function(item) {
        var a = item[key];
        var v = item[attr];
        v[prop](0)[n](a.zIndex).show();
        if (a[title]) {
          v[fnName]();
        }
        item[root]();
      },
      /**
       * @param {Object} $cookies
       * @return {undefined}
       */
      deactivate : function($cookies) {
        var label = $cookies[key];
        var value = $cookies[attr];
        value.hide()[methodName]();
        $cookies[OFFLINE_COOKIE_NAME]();
      }
    },
    overlayX : {
      /**
       * @param {Object} item
       * @return {undefined}
       */
      activate : function(item) {
        var a = item[key];
        var v = item[attr];
        v[prop](0)[n](a.zIndex)[method](a[j], delimiter + self[callbackSymbol](self._[k](a[prefix])) + str_px).show();
        if (a[title]) {
          v[fnName]();
        }
        self[push]("x");
        item[root]();
        window[jsonp](function() {
          v[m]((a[j] == name ? delimiter : "") + self[callbackSymbol](self._[k](a[prefix])), 0);
        }, 50);
      },
      /**
       * @param {Object} $cookies
       * @return {undefined}
       */
      deactivate : function($cookies) {
        var value = $cookies[key];
        var scope = $cookies[attr];
        scope[TAGS](input).blur();
        scope[funcName]();
        window[jsonp](function() {
          self[has]("x");
          $cookies[OFFLINE_COOKIE_NAME]();
          scope[methodName]().hide();
        }, self[key][option] + 50);
      }
    },
    overlayY : {
      /**
       * @param {Object} item
       * @return {undefined}
       */
      activate : function(item) {
        var config = item[key];
        var v = item[attr];
        v[prop](0)[n](config.zIndex)[method](config[j], delimiter + self[callbackSymbol](self._[k](config[f])) + str_px).show();
        if (config[title]) {
          v[fnName]();
        }
        self[push]("y");
        item[root]();
        window[jsonp](function() {
          v[m](0, (config[j] == y ? delimiter : "") + self[callbackSymbol](self._[k](config[f])));
        }, 50);
      },
      /**
       * @param {Object} $cookies
       * @return {undefined}
       */
      deactivate : function($cookies) {
        var value = $cookies[key];
        var scope = $cookies[attr];
        scope[TAGS](input).blur();
        scope[funcName]();
        window[jsonp](function() {
          self[has]("y");
          $cookies[OFFLINE_COOKIE_NAME]();
          scope[methodName]().hide();
        }, self[key][option] + 50);
      }
    },
    pushX : {
      /**
       * @param {Object} item
       * @return {undefined}
       */
      activate : function(item) {
        var data = item[key];
        var obj = item[attr];
        var target = self[i][r].add(self[i][proto][eventName]());
        obj[prop](0)[method](data[j], delimiter + self[callbackSymbol](self._[k](data[prefix])) + str_px).show();
        if (data[title]) {
          obj[fnName]();
        }
        target[n]();
        self[push]("x");
        item[root]();
        window[jsonp](function() {
          obj.add(target)[m]((data[j] == name ? delimiter : "") + self[callbackSymbol](self._[k](data[prefix])), 0);
        }, 50);
      },
      /**
       * @param {Object} $cookies
       * @return {undefined}
       */
      deactivate : function($cookies) {
        var value = $cookies[key];
        var wrapper = $cookies[attr];
        var link = self[i][r].add(self[i][proto][eventName]());
        wrapper[TAGS](input).blur();
        wrapper.add(link)[funcName]();
        window[jsonp](function() {
          self[has]("x");
          wrapper.hide();
          $cookies[OFFLINE_COOKIE_NAME]();
          link[methodName]();
        }, self[key][option] + 50);
      }
    },
    pushY : {
      /**
       * @param {Object} item
       * @return {undefined}
       */
      activate : function(item) {
        var data = item[key];
        var v = item[attr];
        var l = self[i][r].add(self[i][proto][eventName]());
        v[prop](0)[method](data[j], delimiter + self[func](self._[k](data[f])) + str_px).show();
        if (data[title]) {
          v[fnName]();
        }
        self[push]("y");
        item[root]();
        window[jsonp](function() {
          v.add(l)[m](0, (data[j] == y ? delimiter : "") + self[func](self._[k](data[f])));
        }, 50);
      },
      /**
       * @param {Object} $cookies
       * @return {undefined}
       */
      deactivate : function($cookies) {
        var value = $cookies[key];
        var wrapper = $cookies[attr];
        var ref = self[i][r].add(self[i][proto][eventName]());
        wrapper[TAGS](input).blur();
        wrapper.add(ref)[funcName]();
        window[jsonp](function() {
          self[has]("y");
          wrapper.hide();
          $cookies[OFFLINE_COOKIE_NAME]();
        }, self[key][option] + 50);
      }
    },
    revealX : {
      /**
       * @param {Object} item
       * @return {undefined}
       */
      activate : function(item) {
        var data = item[key];
        var v = item[attr];
        var e = self[i][r].add(self[i][proto][eventName]());
        v[prop](0).show();
        if (data[title]) {
          v[fnName]();
        }
        e[n]();
        self[push]("x");
        item[root]();
        window[jsonp](function() {
          e[m]((data[j] == name ? delimiter : "") + self[callbackSymbol](self._[k](data[prefix])), 0);
        }, 50);
      },
      /**
       * @param {Object} $cookies
       * @return {undefined}
       */
      deactivate : function($cookies) {
        var value = $cookies[key];
        var wrapper = $cookies[attr];
        var target = self[i][r].add(self[i][proto][eventName]());
        wrapper[TAGS](input).blur();
        target[funcName]();
        window[jsonp](function() {
          self[has]("x");
          wrapper.hide();
          target[methodName]();
          $cookies[OFFLINE_COOKIE_NAME]();
        }, self[key][option] + 50);
      }
    }
  }, init[_idx][root] = function() {
    self[i][proto][property](this[attr]);
  }, init[_idx][OFFLINE_COOKIE_NAME] = function() {
    if (!this[attr][pluginname]()) {
      return;
    }
    self[i][l][property](this[attr]);
  }, init[_idx][_i] = function() {
    var fn;
    var method;
    if (!this[unlock]) {
      self[i][l][property](this[last]);
      return;
    }
    fn = this[key];
    method = self._[k](fn[context]);
    if (!(method in this[plugin])) {
      /** @type {string} */
      method = type;
    }
    this[plugin][method][_i](this);
    if (fn[left]) {
      if (fn.exclusive) {
        if (self[i][width] === this) {
          self[i][label].removeClass(activeClassName);
          /** @type {null} */
          self[i][width] = val;
        }
      }
    }
    /** @type {boolean} */
    this[unlock] = data;
  }, init[_idx][d] = function() {
    var data;
    var sp;
    var params;
    var p;
    if (this[unlock]) {
      self[i][proto][property](this[last]);
      return;
    }
    data = this[key];
    sp = self._[k](data[context]);
    params = this[attr];
    params[method](prefix, self._[k](data[prefix]))[method](f, self._[k](data[f]));
    if (self._[idx][series] == "ios") {
      if (data[f] == "100%") {
        if (!data[left]) {
          params[method](f, "-webkit-calc(" + self._[k](data[f]) + " + 70px)");
        }
      }
    }
    p = this[num][data[element]];
    params[pKey]("skel-layer-" + data[element]).data(line, data[element]);
    switch(p.v) {
      case item:
        params[method](item, 0);
        break;
      case y:
        params[method](y, 0);
        break;
      case v:
        params[method](item, "50%")[method]("margin-top", delimiter + self.getHalf(data[f]));
    }
    switch(p.h) {
      case x:
        params[method](x, 0);
        break;
      case name:
        params[method](name, 0);
        break;
      case v:
        params[method](x, "50%")[method]("margin-left", delimiter + self.getHalf(data[prefix]));
    }
    this[plugin][sp][d](this);
    if (data[left]) {
      if (data.exclusive) {
        self[i][label][pKey](activeClassName);
        self[i][width] = this;
      }
    }
    /** @type {boolean} */
    this[unlock] = exclusive;
  }, init[_idx][sortField] = function() {
    return this[attr] !== val;
  }, init[_idx][_name] = function() {
    return this[attr].is(":visible");
  }, init[_idx].resume = function(segment) {
    if (!this[sortField]()) {
      return;
    }
    this[attr][TAGS](input).each(function() {
      self.parseResume($(this));
    });
    if (!this[key][left]) {
      this[d](segment);
    }
  }, init[_idx].suspend = function() {
    if (!this[sortField]()) {
      return;
    }
    this[attr][funcName]();
    this[attr][TAGS](input).each(function() {
      self.parseSuspend($(this));
    });
    if (this[unlock]) {
      this[_i]();
    }
  }, init[_idx].init = function() {
    var options = this[key];
    var node = $(this[last]);
    var props = this;
    node[operator]();
    node[TAGS](input).each(function() {
      self.parseInit($(this));
    });
    node[pKey]("skel-layer").data(target, this.index)[method](dom, self[key].baseZIndex)[method](element, "fixed")[method]("-ms-overflow-style", "-ms-autohiding-scrollbar")[method]("-webkit-overflow-scrolling", "touch").hide();
    switch(options.orientation) {
      case "vertical":
        node[method]("overflow-y", value);
        break;
      case "horizontal":
        node[method](a, value);
        break;
      case type:
      ;
      default:
      ;
    }
    if (!options[element] || !(options[element] in this[num])) {
      /** @type {string} */
      options[element] = "top-left";
    }
    if (!options[j]) {
      options[j] = this[num][options[element]][j];
    }
    if (!options[context] || typeof options[context] != "object" && !(options[context] in this[plugin])) {
      options[context] = type;
    }
    if (options.clickToClose) {
      node[TAGS]("a")[method](selector, fn).on("click.skel-layers", function(event) {
        var link;
        var target;
        var domNode = $(this);
        if (domNode.hasClass("skel-layers-ignore")) {
          return;
        }
        event[preventDefault]();
        event[stopPropagation]();
        props[_i]();
        if (domNode.hasClass("skel-layers-ignoreHref")) {
          return;
        }
        link = domNode[attrName]("href");
        target = domNode[attrName]("target");
        window[jsonp](function() {
          if (target == "_blank" && self._[idx][series] != "wp") {
            window.open(link);
          } else {
            window.location.href = link;
          }
        }, self[key][option] + 10);
      });
    }
    if (self._[idx][series] == "ios") {
      node[TAGS]("input,select,textarea").on("focus", function(event) {
        var loading = $(this);
        event[preventDefault]();
        event[stopPropagation]();
        window[jsonp](function() {
          var max = self[i][id][bits];
          /** @type {number} */
          var n = self[i][id][prop]() - max;
          self[i][id][prop](max);
          node[prop](node[prop]() + n);
          loading.hide();
          window[jsonp](function() {
            loading.show();
          }, 0);
        }, 100);
      });
    }
    if (self._[idx][b]) {
      node.on("touchstart", function(e) {
        props[propname] = e[originalEvent][alpha][0].pageX;
        props[propName] = e[originalEvent][alpha][0].pageY;
      }).on("touchmove", function(e) {
        var end;
        var start;
        var fade;
        var current_opacity;
        var doneResults;
        var startRef;
        var max;
        if (props[propname] === val || props[propName] === val) {
          return;
        }
        /** @type {number} */
        end = props[propname] - e[originalEvent][alpha][0].pageX;
        /** @type {number} */
        start = props[propName] - e[originalEvent][alpha][0].pageY;
        fade = node.outerHeight();
        /** @type {number} */
        current_opacity = node.get(0).scrollHeight - node[prop]();
        if (options.swipeToClose) {
          /** @type {boolean} */
          doneResults = data;
          /** @type {number} */
          startRef = 20;
          /** @type {number} */
          max = 50;
          switch(options[j]) {
            case x:
              /** @type {boolean} */
              doneResults = start < startRef && (start > -1 * startRef && end > max);
              break;
            case name:
              /** @type {boolean} */
              doneResults = start < startRef && (start > -1 * startRef && end < -1 * max);
              break;
            case item:
              /** @type {boolean} */
              doneResults = end < startRef && (end > -1 * startRef && start > max);
              break;
            case y:
              /** @type {boolean} */
              doneResults = end < startRef && (end > -1 * startRef && start < -1 * max);
          }
          if (doneResults) {
            return props[propname] = val, props[propName] = val, props[_i](), data;
          }
        }
        if (node[prop]() == 0 && start < 0 || current_opacity > fade - 2 && (current_opacity < fade + 2 && start > 0)) {
          return data;
        }
      });
    }
    this[attr] = node;
  }, self = {
    config : {
      baseZIndex : 1E4,
      transform : exclusive,
      transformBreakpoints : val,
      transformTest : val,
      speed : 250,
      layers : {}
    },
    cache : {
      layers : {},
      body : val,
      window : val,
      wrapper : val,
      inactiveWrapper : val,
      activeWrapper : val,
      exclusiveLayer : val
    },
    eventType : eventType,
    /**
     * @return {?}
     */
    getBaseFontSize : function() {
      return self._[idx].IEVersion < 9 ? 16.5 : parseFloat(getComputedStyle(self[i][label].get(0)).fontSize);
    },
    /**
     * @param {?} onComplete
     * @param {number} G
     * @return {?}
     */
    recalc : function(onComplete, G) {
      var em = self._.parseMeasurement(onComplete);
      var diff;
      switch(em[1]) {
        case "%":
          /** @type {number} */
          diff = Math.floor(G * (em[0] / 100));
          break;
        case "em":
          /** @type {number} */
          diff = self.getBaseFontSize() * em[0];
          break;
        default:
        ;
        case str_px:
          diff = em[0];
      }
      return diff;
    },
    /**
     * @param {?} onComplete
     * @return {?}
     */
    recalcW : function(onComplete) {
      return self.recalc(onComplete, $(window)[prefix]());
    },
    /**
     * @param {?} onComplete
     * @return {?}
     */
    recalcH : function(onComplete) {
      return self.recalc(onComplete, $(window)[f]());
    },
    /**
     * @param {Object} text
     * @return {?}
     */
    getHalf : function(text) {
      /** @type {number} */
      var code = parseInt(text);
      return typeof text == "string" && text.charAt(text[start] - 1) == "%" ? Math.floor(code / 2) + "%" : Math.floor(code / 2) + str_px;
    },
    /**
     * @param {Node} $templateCache
     * @return {undefined}
     */
    parseSuspend : function($templateCache) {
      var map = $templateCache.get(0);
      if (map[objUid]) {
        map[objUid]();
      }
    },
    /**
     * @param {Node} $templateCache
     * @return {undefined}
     */
    parseResume : function($templateCache) {
      var map = $templateCache.get(0);
      if (map[letter]) {
        map[letter]();
      }
    },
    /**
     * @param {Object} element
     * @return {undefined}
     */
    parseInit : function(element) {
      var value;
      var tagNameArr;
      var map = element.get(0);
      var act = element[attrName]("data-action");
      var args = element[attrName]("data-args");
      var el;
      var view;
      if (act) {
        if (args) {
          args = args.split(",");
        }
      }
      switch(act) {
        case "toggleLayer":
        ;
        case "layerToggle":
          element[method](selector, fn)[method]("cursor", "pointer");
          /**
           * @param {Object} event
           * @return {?}
           */
          value = function(event) {
            event[preventDefault]();
            event[stopPropagation]();
            if (self[i][width]) {
              return self[i][width][_i](), data;
            }
            var emptyJ = $(this);
            var opts = self[i][lang][args[0]];
            if (opts[_name]()) {
              opts[_i]();
            } else {
              opts[d]();
            }
          };
          if (self._[idx][series] == tool || self._[idx][series] == "wp") {
            element.on(eventType, value);
          } else {
            element.on(self.eventType, value);
          }
          break;
        case "navList":
          el = $(s + args[0]);
          value = el[TAGS]("a");
          /** @type {Array} */
          tagNameArr = [];
          value.each(function() {
            var el = $(this);
            var n;
            /** @type {number} */
            n = Math.max(0, el.parents("li")[start] - 1);
            console.log(el.text());
            // Mon compte <li id="management"
            // Mon profil <a id="modifprofil"
            // Mes plaques suivies <a id ="platte"
            // Mes notifications reçues <a id ="notifr"

            // Se connecter <li id="sep" <a id ="se"
            // Se deconnecter <li id="discop" <a id="disco"
            /*
            Accueil
skel-layers.min.js:1017 Mon compte
skel-layers.min.js:1017 Mon Profil
skel-layers.min.js:1017 Mes plaques suivies
skel-layers.min.js:1017 Mes notifications reçues
skel-layers.min.js:1017 A propos
skel-layers.min.js:1017 Contact
skel-layers.min.js:1017 Se Connecter
skel-layers.min.js:1017 Se déconnecter
skel-layers.min.js:1017 Administration

if(document.cookie==""){ // Pas connecté
hide(document.getElementById('discop'));
hide(document.getElementById('management'));
    }
            */


            var connected = 0;
           if(document.cookie!="") { connected = 1; }
           else { connected = 0; } 
           console.log(connected);

            if(el.text() == 'Mon compte') {
                if(connected == 1) {
tagNameArr.push('<span id="management" ><a class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");

                } else {
tagNameArr.push('<span id="management" style="display:none;"><a class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
                }

            } else if(el.text() == 'Mon Profil') {
              if(connected == 1) {
tagNameArr.push('<span><a id="modifprofil" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              } else {
tagNameArr.push('<span style="display:none;"><a id="modifprofil" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              }

            } else if(el.text() == 'Mes plaques suivies') {
              if(connected == 1) {
tagNameArr.push('<span><a id="platte" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              } else {
tagNameArr.push('<span style="display:none;"><a id="platte" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              }

            } else if(el.text() == 'Mes notifications reçues') {
              if(connected == 1) {
tagNameArr.push('<span><a id="notifr" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              } else {
tagNameArr.push('<span style="display:none;"><a id="notifr" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");

              }

            } else if(el.text() == 'Se déconnecter') {
              if(connected == 1) {
tagNameArr.push('<span id="discop"><a id="disco" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              } else {
tagNameArr.push('<span id="discop" style="display:none;"><a id="disco" class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");

              }
 
            } else if(el.text() == 'Administration') {
              if(connected == 1) {
tagNameArr.push('<span><a class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              } else {
tagNameArr.push('<span style="display:none;"><a class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");

              }

            } else if(el.text() == 'Se Connecter') {
              if(connected == 0) {
tagNameArr.push('<span id="se"><a class="link depth-' + n + '" href="connexion.html" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");
              } else {
tagNameArr.push('<span id="se" style="display:none;"><a class="link depth-' + n + '" href="connexion.html" ><span class="indent-' + n + '"></span>' + el.text() + " </a></span>");

              }

            }



            else {
            tagNameArr.push('<a class="link depth-' + n + '" href="' + el[attrName]("href") + '" ><span class="indent-' + n + '"></span>' + el.text() + " </a>");

            }

          });
          if (tagNameArr[start] > 0) {
            element.html("<nav>" + tagNameArr.join("") + "</nav>");
          }
          break;
        case "copyText":
          el = $(s + args[0]);
          element.html(el.text());
          break;
        case "copyHTML":
          el = $(s + args[0]);
          element.html(el.html());
          break;
        case "moveElementContents":
          el = $(s + args[0]);
          /**
           * @return {undefined}
           */
          map[letter] = function() {
            el[eventName]().each(function() {
              element[property]($(this));
            });
          };
          /**
           * @return {undefined}
           */
          map[objUid] = function() {
            element[eventName]().each(function() {
              el[property]($(this));
            });
          };
          map[letter]();
          break;
        case "moveElement":
          el = $(s + args[0]);
          /**
           * @return {undefined}
           */
          map[letter] = function() {
            $(cols + el[attrName]("id") + '" />').insertBefore(el);
            element[property](el);
          };
          /**
           * @return {undefined}
           */
          map[objUid] = function() {
            $(tr + el[attrName]("id")).replaceWith(el);
          };
          map[letter]();
          break;
        case "moveCell":
          el = $(s + args[0]);
          view = $(s + args[1]);
          /**
           * @return {undefined}
           */
          map[letter] = function() {
            $(cols + el[attrName]("id") + '" />').insertBefore(el);
            element[property](el);
            el[method](prefix, value);
            if (view) {
              view[reverseKey]();
            }
          };
          /**
           * @return {undefined}
           */
          map[objUid] = function() {
            $(tr + el[attrName]("id")).replaceWith(el);
            el[method](prefix, "");
            if (view) {
              view[method](prefix, "");
            }
          };
          map[letter]();
          break;
        default:
        ;
      }
    },
    /**
     * @param {string} near
     * @return {undefined}
     */
    lockView : function(near) {
      self[i][id][bits] = self[i][id][prop]();
      if (self._[idx][b]) {
        self[i][label][method](far + near, left);
      }
      self[i][r].on(loadEvents, function(event) {
        event[preventDefault]();
        event[stopPropagation]();
        if (self[i][width]) {
          self[i][width][_i]();
        }
      });
      self[i][id].on(events, function(dataAndEvents) {
        if (self[i][width]) {
          self[i][width][_i]();
        }
      });
      if (!self._[idx][b]) {
        self[i][id].on(types, function(dataAndEvents) {
          if (self[i][width]) {
            self[i][width][_i]();
          }
        });
      }
    },
    /**
     * @param {string} near
     * @return {undefined}
     */
    unlockView : function(near) {
      if (self._[idx][b]) {
        self[i][label][method](far + near, VISIBLE);
      }
      self[i][r].off(loadEvents);
      self[i][id].off(events);
      if (!self._[idx][b]) {
        self[i][id].off(types);
      }
    },
    /**
     * @return {undefined}
     */
    initLayers : function() {
      var r;
      var s;
      var args;
      /** @type {number} */
      var u = 1;
      self._[timeoutKey](self[key][lang], function(k) {
        var c;
        if (!self[key][lang][k].html && (c = $(s + k))[start] == 0) {
          return;
        }
        args = new init(k, self[key][lang][k], u++);
        self[i][lang][k] = args;
        if (c) {
          c[eventName]()[insertionType](args[last]);
          c.remove();
        }
      });
    },
    /**
     * @return {undefined}
     */
    initTransforms : function() {
      if (self[key][event]) {
        /**
         * @return {?}
         */
        $.fn[funcName] = function() {
          return $(this)[m](0, 0);
        };
        /**
         * @param {string} dataAndEvents
         * @param {string} deepDataAndEvents
         * @return {?}
         */
        $.fn[m] = function(dataAndEvents, deepDataAndEvents) {
          return $(this)[method](event, "translate(" + dataAndEvents + "px, " + deepDataAndEvents + "px)");
        };
        /**
         * @return {?}
         */
        $.fn[operator] = function() {
          return $(this)[method]("backface-visibility", left)[method]("perspective", "500")[module]("transition", "transform " + self[key][option] / 1E3 + "s ease-in-out");
        };
      } else {
        var s;
        /** @type {Array} */
        var data = [];
        self[i][id].resize(function() {
          if (self[key][option] != 0) {
            var optionValue = self[key][option];
            /** @type {number} */
            self[key][option] = 0;
            window[jsonp](function() {
              self[key][option] = optionValue;
              /** @type {Array} */
              data = [];
            }, optionValue);
          }
        });
        /**
         * @return {?}
         */
        $.fn[funcName] = function() {
          /** @type {number} */
          var ii = 0;
          for (;ii < this[start];ii++) {
            var p = this[ii];
            var el = $(p);
            if (data[p.id]) {
              el.animate(data[p.id], self[key][option], "swing", function() {
                self._[timeoutKey](data[p.id], function(key) {
                  el[method](key, data[p.id][key]);
                });
                self[i][label][method](a, VISIBLE);
                self[i][r][method](prefix, value)[method](resp, 0);
              });
            }
          }
          return $(this);
        };
        /**
         * @param {number} ms
         * @param {number} offset
         * @return {?}
         */
        $.fn[m] = function(ms, offset) {
          var node_ix;
          var f;
          var throttledUpdate;
          var tryIt;
          /** @type {number} */
          ms = parseInt(ms);
          /** @type {number} */
          offset = parseInt(offset);
          if (ms != 0) {
            self[i][label][method](a, left);
            self[i][r][method](prefix, self[i][id][prefix]());
          } else {
            /**
             * @return {undefined}
             */
            throttledUpdate = function() {
              self[i][label][method](a, VISIBLE);
              self[i][r][method](prefix, value);
            };
          }
          if (offset < 0) {
            self[i][r][method](resp, Math.abs(offset));
          } else {
            /**
             * @return {undefined}
             */
            tryIt = function() {
              self[i][r][method](resp, 0);
            };
          }
          /** @type {number} */
          node_ix = 0;
          for (;node_ix < this[start];node_ix++) {
            var node = this[node_ix];
            var current = $(node);
            var target;
            if (!data[node.id]) {
              if (target = init[_idx][num][current.data(line)]) {
                data[node.id] = {};
                switch(target.v) {
                  case v:
                  ;
                  case item:
                    /** @type {number} */
                    data[node.id][item] = parseInt(current[method](item));
                    break;
                  case y:
                    /** @type {number} */
                    data[node.id][y] = parseInt(current[method](y));
                }
                switch(target.h) {
                  case v:
                  ;
                  case x:
                    /** @type {number} */
                    data[node.id][x] = parseInt(current[method](x));
                    break;
                  case name:
                    /** @type {number} */
                    data[node.id][name] = parseInt(current[method](name));
                }
              } else {
                target = current[element]();
                data[node.id] = {
                  top : target[item],
                  left : target[x]
                };
              }
            }
            a = {};
            self._[timeoutKey](data[node.id], function(key) {
              var val;
              switch(key) {
                case item:
                  val = self[func](data[node.id][key]) + offset;
                  break;
                case y:
                  /** @type {number} */
                  val = self[func](data[node.id][key]) - offset;
                  break;
                case x:
                  val = self[callbackSymbol](data[node.id][key]) + ms;
                  break;
                case name:
                  /** @type {number} */
                  val = self[callbackSymbol](data[node.id][key]) - ms;
              }
              a[key] = val;
            });
            current.animate(a, self[key][option], "swing", function() {
              if (throttledUpdate) {
                throttledUpdate();
              }
              if (tryIt) {
                tryIt();
              }
            });
          }
          return $(this);
        };
        /**
         * @return {?}
         */
        $.fn[operator] = function() {
          return $(this)[method](element, "absolute");
        };
      }
    },
    /**
     * @return {undefined}
     */
    initObjects : function() {
      self[i][id] = $(window);
      self[i][id].load(function() {
        if (self[i][id][prop]() == 0) {
          window.scrollTo(0, 1);
        }
      });
      self._[index](function() {
        self[i][label] = $(label);
        self[i][label].wrapInner('<div id="skel-layers-wrapper" />');
        self[i][r] = $("#skel-layers-wrapper");
        self[i][r][method](element, maxDate)[method](x, "0")[method](name, "0")[method](item, "0")[operator]();
        self[i][l] = $('<div id="skel-layers-inactiveWrapper" />')[insertionType](self[i][label]);
        self[i][l][method](f, "100%");
        self[i][proto] = $('<div id="skel-layers-activeWrapper" />')[insertionType](self[i][label]);
        self[i][proto][method](element, maxDate);
        self._[action](mm, self[i][l][0]);
        self._[action]("skel_layers_activeWrapper", self[i][proto][0]);
        self._[action]("skel_layers_wrapper", self[i][r][0]);
        $("[autofocus]").focus();
      });
    },
    /**
     * @return {undefined}
     */
    initIncludes : function() {
      $(".skel-layers-include").each(function() {
        self.parseInit($(this));
      });
    },
    /**
     * @return {undefined}
     */
    init : function() {
      if (self[key][arrayKey]) {
        self[key][event] = self[key][arrayKey]();
      }
      if (self[key][event]) {
        if (self._[idx][series] == tool && self._[idx].deviceVersion < 4 || self._[idx][series] == "wp") {
          /** @type {boolean} */
          self[key][event] = data;
        }
        if (self._[idx].IEVersion < 10) {
          /** @type {boolean} */
          self[key][event] = data;
        }
        if (self[key][o]) {
          if (!self._.hasActive(self._[state](self[key][o]))) {
            /** @type {boolean} */
            self[key][event] = data;
          }
        }
      }
      /** @type {string} */
      self.eventType = self._[idx][b] ? "touchend" : eventType;
      self.initObjects();
      self.initTransforms();
      self._[index](function() {
        self.initLayers();
        self.initIncludes();
        self._.updateState();
        self.refresh();
      });
    },
    /**
     * @return {undefined}
     */
    refresh : function() {
      $(".skel-layers-fixed")[operator]()[insertionType](self[i][proto]);
    },
    /**
     * @param {?} name
     * @return {undefined}
     */
    activate : function(name) {
      self._[index](function() {
        self[i][lang][name][d]();
      });
    },
    /**
     * @param {?} component
     * @return {undefined}
     */
    deactivate : function(component) {
      self._[index](function() {
        self[i][lang][component][_i]();
      });
    },
    /**
     * @param {?} name
     * @return {undefined}
     */
    toggle : function(name) {
      self._[index](function() {
        var modules = self[i][lang][name];
        if (modules[_name]()) {
          modules[_i]();
        } else {
          modules[d]();
        }
      });
    }
  }, self);
}(jQuery));
